(() => {
  const handle = "DaAlphaPanda";
  const deleteConfirmSelector = '[data-testid="confirmationSheetConfirm"]';

  let pinnedPostId = null;
  const deletedPosts = new Set();

  const waitForElement = (checkFn, timeout = 5000) =>
    new Promise((resolve, reject) => {
      const start = Date.now();
      const timer = setInterval(() => {
        const el = checkFn();
        if (el) {
          clearInterval(timer);
          resolve(el);
        } else if (Date.now() - start > timeout) {
          clearInterval(timer);
          reject("Timeout waiting for element");
        }
      }, 100);
    });

  const getPinnedPostId = () => {
    const pinned = document.querySelector('[aria-label="Pinned Tweet"]');
    if (pinned) {
      const link = pinned.querySelector('a[href*="/status/"]');
      if (link) {
        pinnedPostId = link.href.split("/status/")[1];
      }
    }
  };

  const getMyTweets = () => {
    return Array.from(document.querySelectorAll('article[data-testid="tweet"]')).filter(article => {
      const link = article.querySelector(`a[href*="/${handle}"]`);
      const statusLink = article.querySelector('a[href*="/status/"]');
      if (!link || !statusLink) return false;

      const tweetId = statusLink.href.split("/status/")[1];
      if (tweetId === pinnedPostId || deletedPosts.has(tweetId)) return false;

      return true;
    });
  };

  const clickDeleteFlow = async (article) => {
    try {
      const tweetId = article.querySelector('a[href*="/status/"]').href.split("/status/")[1];

      const caretBtn = article.querySelector('[data-testid="caret"]');
      if (!caretBtn) return;

      caretBtn.click();

      const deleteBtn = await waitForElement(() => {
        return document.evaluate(
          "//span[text()='Delete']",
          document,
          null,
          XPathResult.FIRST_ORDERED_NODE_TYPE,
          null
        ).singleNodeValue;
      });

      deleteBtn.click();

      const confirmBtn = await waitForElement(() => {
        return document.querySelector(deleteConfirmSelector);
      });

      confirmBtn.click();

      deletedPosts.add(tweetId);
      console.log(`âœ… Deleted: ${tweetId}`);
    } catch (err) {
      console.warn(`â›” Skip: ${err}`);
    }
  };

  const deleteBatch = async () => {
    const myTweets = getMyTweets();

    if (myTweets.length === 0) {
      console.log("No more deletable tweets found.");
      return false;
    }

    for (const tweet of myTweets) {
      await clickDeleteFlow(tweet);
    }

    return true;
  };

  const scrollAndRun = async () => {
    getPinnedPostId();

    let keepGoing = true;
    while (keepGoing) {
      keepGoing = await deleteBatch();
      window.scrollBy(0, window.innerHeight);
      await new Promise(r => setTimeout(r, 1500));
    }

    console.log("ðŸŽ¯ Finished all deletions.");
  };

  scrollAndRun();
})();
